{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { useFonts } from 'expo-font';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar customFonts = {\n  'hitMePunk': require(\"../../assets/fonts/hitMePunk.ttf\")\n};\nexport function loadCustomFonts() {\n  return _loadCustomFonts.apply(this, arguments);\n}\nfunction _loadCustomFonts() {\n  _loadCustomFonts = _asyncToGenerator(function* () {\n    yield Font.loadAsync(customFonts);\n  });\n  return _loadCustomFonts.apply(this, arguments);\n}\nvar _useFonts = useFonts(customFonts),\n  _useFonts2 = _slicedToArray(_useFonts, 1),\n  loaded = _useFonts2[0];\nuseEffect(function () {\n  if (!loaded) {}\n}, [loaded]);\nfunction BMICalc() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    height = _useState2[0],\n    setHeight = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    weight = _useState4[0],\n    setWeight = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    bmi = _useState6[0],\n    setBMI = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    bmiResult = _useState8[0],\n    setBMIResult = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    metricUnits = _useState10[0],\n    setUnits = _useState10[1];\n  function calculate(height, weight) {\n    var result;\n    if (metricUnits) {\n      var tempHeight = parseFloat(height) / 100.0;\n      result = parseFloat(weight) / tempHeight ** 2;\n    } else {\n      result = 703 * parseFloat(weight) / parseFloat(height) ** 2;\n    }\n    setBMI(result.toFixed(2));\n    if (result < 18.5) {\n      setBMIResult('Underweight');\n    } else if (result >= 18.5 && result < 25) {\n      setBMIResult('Normal weight');\n    } else if (result >= 25 && result < 30) {\n      setBMIResult('Overweight');\n    } else if (result >= 30) {\n      setBMIResult('Obese');\n    } else {\n      alert('Incorrect Input!');\n      setBMIResult('');\n    }\n  }\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(ImageBackground, {\n      source: require(\"../../assets/BACKGROUND.png\"),\n      resizeMode: \"cover\",\n      style: styles.image,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"BMI Calculator\"\n      }), _jsx(Text, {\n        style: styles.label,\n        children: \"Height\"\n      }), _jsxs(View, {\n        style: [styles.inputField, {\n          padding: 0\n        }],\n        children: [_jsx(TextInput, {\n          style: styles.inputToggle,\n          underlineColorAndroid: \"transparent\",\n          placeholder: \"Height\",\n          placeholderTextColor: '#999',\n          autoCapitalize: \"none\",\n          onChangeText: setHeight\n        }), _jsx(Pressable, {\n          onPress: function onPress() {\n            return setUnits(!metricUnits);\n          },\n          children: _jsx(Text, {\n            style: styles.inputToggle,\n            children: metricUnits ? 'cm' : 'in'\n          })\n        })]\n      }), _jsx(Text, {\n        style: styles.label,\n        children: \"Weight\"\n      }), _jsxs(View, {\n        style: [styles.inputField, {\n          padding: 0\n        }],\n        children: [_jsx(TextInput, {\n          style: styles.inputToggle,\n          underlineColorAndroid: \"transparent\",\n          placeholder: \"Weight\",\n          placeholderTextColor: '#999',\n          autoCapitalize: \"none\",\n          onChangeText: setWeight\n        }), _jsx(Pressable, {\n          onPress: function onPress() {\n            return setUnits(!metricUnits);\n          },\n          children: _jsx(Text, {\n            style: styles.inputToggle,\n            children: metricUnits ? 'kg' : 'lbs'\n          })\n        })]\n      }), _jsx(TouchableOpacity, {\n        style: styles.submitButton,\n        onPress: function onPress() {\n          calculate(height, weight);\n        },\n        children: _jsx(Text, {\n          style: styles.submitButtonText,\n          children: \" Calculate \"\n        })\n      }), _jsx(Text, {\n        style: styles.output,\n        children: bmi\n      }), _jsx(Text, {\n        style: styles.resultText,\n        children: bmiResult\n      })]\n    })\n  });\n}\nexport default BMICalc;\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 23,\n    marginHorizontal: 20,\n    rowGap: 8,\n    backgroundColor: 'transparent'\n  },\n  inputField: {\n    borderWidth: 1,\n    borderColor: 'white',\n    padding: 10,\n    flexDirection: 'row',\n    fontSize: 20\n  },\n  inputToggle: {\n    flex: 1,\n    padding: 10,\n    fontSize: 20\n  },\n  submitButton: {\n    backgroundColor: 'rgba(0, 0, 0, .69)',\n    borderWidth: 1,\n    borderColor: 'white',\n    padding: 10,\n    marginVertical: 15,\n    height: 40,\n    shadowColor: 'deeppink',\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    shadowRadius: 20\n  },\n  submitButtonText: {\n    textAlign: \"center\",\n    color: 'deeppink',\n    fontSize: 18\n  },\n  output: {\n    textAlign: \"center\",\n    fontSize: 30\n  },\n  title: {\n    paddingTop: 30,\n    paddingBottom: 10,\n    textAlign: \"center\",\n    fontSize: 30,\n    fontWeight: \"bold\"\n  },\n  resultText: {\n    paddingTop: 20,\n    paddingBottom: 10,\n    textAlign: \"center\",\n    fontSize: 30,\n    color: 'blue'\n  },\n  label: {\n    fontSize: 20,\n    color: 'deeppink'\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TouchableOpacity","TextInput","StyleSheet","Pressable","ImageBackground","useFonts","jsx","_jsx","jsxs","_jsxs","customFonts","require","loadCustomFonts","_loadCustomFonts","apply","arguments","_asyncToGenerator","Font","loadAsync","_useFonts","_useFonts2","_slicedToArray","loaded","useEffect","BMICalc","_useState","_useState2","height","setHeight","_useState3","_useState4","weight","setWeight","_useState5","_useState6","bmi","setBMI","_useState7","_useState8","bmiResult","setBMIResult","_useState9","_useState10","metricUnits","setUnits","calculate","result","tempHeight","parseFloat","toFixed","alert","style","styles","container","children","source","resizeMode","image","title","label","inputField","padding","inputToggle","underlineColorAndroid","placeholder","placeholderTextColor","autoCapitalize","onChangeText","onPress","submitButton","submitButtonText","output","resultText","create","paddingTop","marginHorizontal","rowGap","backgroundColor","borderWidth","borderColor","flexDirection","fontSize","flex","marginVertical","shadowColor","shadowOffset","width","shadowRadius","textAlign","color","paddingBottom","fontWeight"],"sources":["C:/Users/autum/HealthFreaks/HealthFreaks/HealthFreaks/app/screens/BMICalc.tsx"],"sourcesContent":["import React, { Component, useState } from 'react'\r\nimport { View, Text, TouchableOpacity, TextInput, StyleSheet, Pressable, ImageBackground } from 'react-native'\r\nimport { useFonts } from 'expo-font';\r\n\r\nconst customFonts = {\r\n   'hitMePunk': require('../../assets/fonts/hitMePunk.ttf')\r\n }\r\n \r\n export async function loadCustomFonts() {\r\n   await Font.loadAsync(customFonts);\r\n }\r\n\r\n const [loaded] = useFonts(customFonts); // Load custom fonts using useFonts\r\n\r\n  useEffect(() => {\r\n    // Check if fonts are loaded\r\n    if (!loaded) {\r\n      // Handle font loading in progress\r\n    }\r\n  }, [loaded]);\r\n\r\nfunction BMICalc() {\r\n   const [height, setHeight] = useState('');\r\n   const [weight, setWeight] = useState('');\r\n   const [bmi, setBMI] = useState('');\r\n   const [bmiResult, setBMIResult] = useState('');\r\n   const [metricUnits, setUnits] = useState(true);\r\n\r\n   function calculate(height: string, weight: string) {\r\n      //calculation\r\n      var result;\r\n      if (metricUnits) {   //using metric units\r\n         let tempHeight = parseFloat(height) / 100.0           //convert cm to m\r\n         result = (parseFloat(weight) / (tempHeight ** 2));    //bmi = weight / (height^2)\r\n      } else {             //using imperial units\r\n         result = ((703 * parseFloat(weight)) / (parseFloat(height) ** 2));   //bmi = (703 * weight) / (height^2)\r\n      }\r\n      //display result\r\n      setBMI(result.toFixed(2));\r\n      if (result < 18.5) {\r\n         setBMIResult('Underweight');\r\n      }\r\n      else if (result >= 18.5 && result < 25) {\r\n         setBMIResult('Normal weight');\r\n      }\r\n      else if (result >= 25 && result < 30) {\r\n         setBMIResult('Overweight');\r\n      }\r\n      else if (result >= 30) {\r\n         setBMIResult('Obese');\r\n      }\r\n      else {\r\n         alert('Incorrect Input!');\r\n         setBMIResult('');\r\n      }\r\n   }\r\n   return (\r\n      <View style={styles.container}>\r\n         <ImageBackground source={require('../../assets/BACKGROUND.png')} resizeMode='cover' style={styles.image}>\r\n            <Text style={styles.title}>BMI Calculator</Text>\r\n\r\n            <Text style={styles.label}>Height</Text>\r\n            <View style={[styles.inputField, { padding: 0 }]}>\r\n               <TextInput style={styles.inputToggle}\r\n                  underlineColorAndroid=\"transparent\"\r\n                  placeholder=\"Height\"\r\n                  placeholderTextColor={'#999'}\r\n                  autoCapitalize=\"none\"\r\n                  onChangeText={setHeight} />\r\n               <Pressable onPress={() => setUnits(!metricUnits)}>\r\n                  <Text style={styles.inputToggle}>{metricUnits ? 'cm' : 'in'}</Text>\r\n               </Pressable>\r\n            </View>\r\n            <Text style={styles.label}>Weight</Text>\r\n            <View style={[styles.inputField, { padding: 0 }]}>\r\n               <TextInput style={styles.inputToggle}\r\n                  underlineColorAndroid=\"transparent\"\r\n                  placeholder=\"Weight\"\r\n                  placeholderTextColor={'#999'}\r\n                  autoCapitalize=\"none\"\r\n                  onChangeText={setWeight} />\r\n               <Pressable onPress={() => setUnits(!metricUnits)}>\r\n                  <Text style={styles.inputToggle}>{metricUnits ? 'kg' : 'lbs'}</Text>\r\n               </Pressable>\r\n            </View>\r\n            <TouchableOpacity style={styles.submitButton} onPress={() => { calculate(height, weight); }}>\r\n               <Text style={styles.submitButtonText}> Calculate </Text>\r\n            </TouchableOpacity>\r\n            <Text style={styles.output}>{bmi}</Text>\r\n            <Text style={styles.resultText}>{bmiResult}</Text>\r\n         </ImageBackground>\r\n      </View>\r\n   )\r\n}\r\nexport default BMICalc;\r\n\r\nconst styles = StyleSheet.create({\r\n   container: {\r\n      paddingTop: 23,\r\n      marginHorizontal: 20,\r\n      rowGap: 8,\r\n      backgroundColor: 'transparent',\r\n   },\r\n   inputField: {\r\n      //margin: 15,\r\n      //height: 40,\r\n      borderWidth: 1,\r\n      borderColor: 'white',\r\n      padding: 10,\r\n      flexDirection: 'row',\r\n      fontSize: 20,\r\n   },\r\n   inputToggle: {\r\n      flex: 1,\r\n      padding: 10,\r\n      fontSize: 20,\r\n   },\r\n   submitButton: {\r\n      backgroundColor: 'rgba(0, 0, 0, .69)',\r\n      borderWidth: 1,\r\n      borderColor: 'white',\r\n      padding: 10,\r\n      marginVertical: 15,\r\n      height: 40,\r\n      shadowColor: 'deeppink',\r\n      shadowOffset: { width: 0, height: 0 }, \r\n      shadowRadius: 20, \r\n   },\r\n   submitButtonText: {\r\n      textAlign: \"center\",\r\n      color: 'deeppink',\r\n      // fontWeight:\"bold\",\r\n      fontSize: 18,\r\n   },\r\n   output: {\r\n      textAlign: \"center\",\r\n      fontSize: 30,\r\n   },\r\n   title: {\r\n      paddingTop: 30,\r\n      paddingBottom: 10,\r\n      textAlign: \"center\",\r\n      fontSize: 30,\r\n      fontWeight: \"bold\",\r\n   },\r\n   resultText: {\r\n      paddingTop: 20,\r\n      paddingBottom: 10,\r\n      textAlign: \"center\",\r\n      fontSize: 30,\r\n      color: 'blue'\r\n   },\r\n   label: {\r\n      //marginLeft: 15,\r\n      fontSize: 20,\r\n      color: 'deeppink',\r\n   }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}